---
- name: Install network tools
  ansible.builtin.apt:
    name: "{{ item }}"
    update_cache: true
  loop:
    - arptables
    - ebtables
    - iputils-ping
    - ipvsadm
    - net-tools
    - wireguard

- name: Ensure DNS exists
  lineinfile:
    dest: /etc/systemd/resolved.conf
    regexp: '^#DNS='
    line: 'DNS=192.168.30.1'
    state: present
  notify:
    - restart systemd-resolved
- name: Ensure Fallback DNS exists
  lineinfile:
    dest: /etc/systemd/resolved.conf
    regexp: '^#FallbackDNS='
    line: 'FallbackDNS=1.1.1.1'
    state: present
  notify:
    - restart systemd-resolved

- name: Set hostname to inventory hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  when:
    - ansible_hostname != inventory_hostname
  tags:
    - network

- name: Update /etc/hosts to include hostname
  ansible.builtin.blockinfile:
    path: /etc/hosts
    create: true
    block: |
      127.0.0.1 localhost
      127.0.1.1 {{ inventory_hostname }}

      # The following lines are desirable for IPv6 capable hosts
      ::1 ip6-localhost ip6-loopback
      fe00::0 ip6-localnet
      ff00::0 ip6-mcastprefix
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters
      ff02::3 ip6-allhosts
  tags:
    - network

- name: Ensure Old /etc/sysctl.d/99-kubernetes-cri.conf is not there
  ansible.builtin.file:
    state: absent
    path: "{{ item }}"
  loop:
    - "/etc/sysctl.d/99-kubernetes-cri.conf"
  tags:
    - network

- name: Set system controls for Kubernetes
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/99-kubernetes.conf
    reload: true
  with_dict: "{{ sysctl_config }}"
  vars:
    sysctl_config:
      net.ipv4.ip_forward: 1
      net.ipv4.conf.all.forwarding: 1
      net.ipv6.conf.all.forwarding: 0
      net.bridge.bridge-nf-call-iptables: 1
      net.bridge.bridge-nf-call-ip6tables: 0
      net.ipv4.conf.all.rp_filter: 0
      net.ipv4.conf.default.rp_filter: 0
      net.ipv6.conf.lo.disable_ipv6: 1
      net.ipv6.conf.all.disable_ipv6: 1
      net.ipv6.conf.default.disable_ipv6: 1
  tags:
  - network

# - name: Set system controls for Kubernetes II
#   ansible.posix.sysctl:
#     name: "{{ item.key }}"
#     value: "{{ item.value }}"
#     sysctl_file: /etc/sysctl.conf
#     reload: true
#   with_dict: "{{ sysctl_config }}"
#   vars:
#     sysctl_config:
#       net.ipv4.ip_forward: 1
#       net.ipv4.conf.all.forwarding: 1
#       net.ipv6.conf.all.forwarding: 0
#       net.bridge.bridge-nf-call-iptables: 1
#       net.bridge.bridge-nf-call-ip6tables: 0
#       net.ipv4.conf.all.rp_filter: 0
#       net.ipv4.conf.default.rp_filter: 0
#       net.ipv6.conf.lo.disable_ipv6: 1
#       net.ipv6.conf.all.disable_ipv6: 1
#       net.ipv6.conf.default.disable_ipv6: 1
#   tags:
#   - network
# - name: Check for bridge-nf-call-iptables
#   ansible.builtin.stat:
#     path: /proc/sys/net/bridge/bridge-nf-call-iptables
#   register: bridge_nf_call_iptables_result
#   tags:
#     - network

# # Also turn off ipv6
# - name: Set Kubernetes network configuration
#   ansible.builtin.blockinfile:
#     path: /etc/sysctl.d/99-kubernetes.conf
#     mode: 0644
#     create: true
#     block: |
#       net.ipv4.conf.all.proxy_arp = 1
#       net.ipv4.ip_forward = 1
#       net.bridge.bridge-nf-call-iptables = 1
#       net.ipv4.conf.default.rp_filter = 0
#       net.ipv6.conf.all.disable_ipv6 = 1
#       net.ipv6.conf.default.disable_ipv6 = 1
#       net.ipv6.conf.lo.disable_ipv6 = 1
#     #  net.ipv4.conf.lxc*.rp_filter = 0
#   when:
#     - bridge_nf_call_iptables_result.stat.exists
#   tags:
#     - network

- name: Reload Kubernetes network configuration
  ansible.builtin.shell: sysctl -p /etc/sysctl.d/99-kubernetes.conf
  tags:
    - network

# # Set ip forwarding on in /proc and verify token value with the sysctl command
# - name: Set and verify ipforward
#   ansible.posix.sysctl:
#     name: net.ipv4.ip_forward
#     value: '1'
#     sysctl_set: yes
#   tags:
#     - network

# # Set ip forwarding on in /proc and in the sysctl file and reload if necessary
# - name: Set IPForward
#   ansible.posix.sysctl:
#     name: net.ipv4.ip_forward
#     value: '1'
#     sysctl_set: yes
#     state: present
#     reload: yes
#   tags:
#     - network

# - name: replace netplan
#   roles:
#     - role: mrlesmithjr.netplan
#       become: yes
#       # This role will do nothing unless netplan_enabled is true.
#       netplan_enabled: true

#       # This should point to an existing netplan configuration file
#       # on your system which this role will overwrite,
#       # or to a nonexistent file which netplan is aware of.
#       #
#       # The default is /etc/netplan/config.yaml.
#       netplan_config_file: /etc/netplan/00-k3s-netplan.yaml

#       # Ubuntu 18.04, for example, defaults to using networkd.
#       netplan_renderer: networkd
#       # Simple network configuration to add a single network interface.
#       # Configuration defined bellow will be written to the file defined
#       # above in `netplan_config_file`.
#       netplan_configuration:
#         network:
#           version: 2
#           ethernets:
#             enp28s0f7:
#               addresses:
#                 - 10.11.12.99/24
#   tags:
#     - network
#     - netplan

