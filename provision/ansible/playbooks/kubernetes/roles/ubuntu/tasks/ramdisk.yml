---
# This is an experimental feature for use on non critical clusters
# depends on adding lzop to installed packages.
# 
- name: "check mount point /var/lib/rancher/k3s/server/db/etcd"
  command: mountpoint /var/lib/rancher/k3s/server/db/etcd
  register: etcd_mount_stat
  failed_when: False
  changed_when: False
  tags:
    - ramdisks

- name: Unmount etcd ramdisk
  ansible.posix.mount:
    path: /var/lib/rancher/k3s/server/db/etcd
    state: unmounted
  when:
    - ramdisk is not defined or ( (ramdisk == 'no') or (ramdisk == false) )
    - etcd_mount_stat.stdout == "/var/lib/rancher/k3s/server/db/etcd is a mountpoint"
  tags:
    - ramdisks

- name: Create etcd ramdisk mount directory
  ansible.builtin.file:
    state: present
    path: "/var/lib/rancher/k3s/server/db/etcd"
  when:
    - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
    - etcd_mount_stat.stdout == "/var/lib/rancher/k3s/server/db/etcd is not a mountpoint"
  tags:
    - ramdisks

- name: Mount up etcd ramdisk
  ansible.posix.mount:
    path: "/var/lib/rancher/k3s/server/db/etcd"
    src: tmpfs
    fstype: tmpfs
    opts: rw,nodev,nosuid,size=16G
    state: mounted
  when:
    - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
  tags:
    - ramdisks

- name: Create ramdisk backup directory
  ansible.builtin.file:
    state: directory
    path: "/var/ramdisk-backup"
  when:
    - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
  tags:
    - ramdisks

- name: Update /etc/init.d/ramdisk 
  ansible.builtin.blockinfile:
    path: /etc/init.d/ramdisk
    create: true
    mode: ug+rwx
    block: |
      #! /bin/sh
      # /etc/init.d/ramdisk
      #
      case "$1" in
      start)
          echo "Copying etcd files to ramdisk"
          echo "[`date +"%Y-%m-%d %H:%M"`] START: etcd Ramdisk Synch from HD BEGIN " >> /var/log/ramdisk_sync.log
          cd /var/lib/rancher/k3s/server/db/etcd
          tar --lzop -xvf /var/ramdisk-backup/ramdisk-etcd-backup.tar.lzop
          echo "[`date +"%Y-%m-%d %H:%M"`] START: etcd Ramdisk Synch from HD DONE" >> /var/log/ramdisk_sync.log
          ;;
      sync)
          echo "Synching etcd files from ramdisk to Harddisk"
          echo "[`date +"%Y-%m-%d %H:%M"`] SYNC: etcd Ramdisk Sync to HD BEGIN" >> /var/log/ramdisk_sync.log
          cd /var/ramdisk-backup/
          mv -f ramdisk-rancher-backup.tar.lzop ramdisk-rancher-backup-old.tar.lzop && true
          tar --lzop -cvf ramdisk-rancher-backup.tar.lzop /var/lib/rancher/k3s/server/db/etcd --transform 's,^var/lib/rancher/k3s/server/db/etcd,.,g'
          echo "[`date +"%Y-%m-%d %H:%M"`] SYNC: etcd Ramdisk Sync to HD DONE" >> /var/log/ramdisk_sync.log
          ;;
      stop)
          echo "Synching logfiles from etcd ramdisk to Harddisk"
          echo "[`date +"%Y-%m-%d %H:%M"`] STOP: Ramdisk Synch to HD START" >> /var/log/ramdisk_sync.log
          cd /var/ramdisk-backup/
          tar --lzop -cvf ramdisk-rancher-backup.tar.lzop /var/lib/rancher/k3s/server/db/etcd  --transform 's,^/var/lib/rancher/k3s/server/db/etcd,.,g'
          echo "[`date +"%Y-%m-%d %H:%M"`] STOP Ramdisk Synch to HD DONE" >> /var/log/ramdisk_sync.log
          ;;
      *)
          echo "Usage: /etc/init.d/ramdisk {start|stop|sync}"
          exit 1
          ;;
      esac
      exit 0
  when:
    - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
  tags:
    - ramdisks

- name: "Ensure RAM Disk cron is Removed"
  ansible.builtin.cron:
    name: "Sync RAM Disk"
    state: absent
    user: root
    cron_file: ansible_ramdisk_sync
  when:
    - ramdisk is not defined or ( (ramdisk == 'no') or (ramdisk == false) )
  tags:
    - ramdisks

- name: "Ensure RAM Disk is synced every two minutes"
  ansible.builtin.cron:
    name: "Sync RAM Disk"
    minute: "20"
    user: root
    job: "/etc/init.d/ramdisk sync >> /dev/null 2>&1"
    cron_file: ansible_ramdisk_sync
  when:
    - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
  tags:
    - ramdisks

- name: Make ramdisk script run on 00 99
  ansible.builtin.shell: update-rc.d ramdisk defaults 00 99
  when:
    - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
  tags:
    - ramdisks

- name: Ensure ramdisk service is disabled
  ansible.builtin.shell: update-rc.d ramdisk disable 00 99
  failed_when: False
  changed_when: False
  when:
    - ramdisk is not defined or ( (ramdisk == 'no') or (ramdisk == false) )
  tags:
    - ramdisks


# # Old
# - name: "check mount point /var/lib/rancher "
#   command: mountpoint /var/lib/rancher
#   register: k3s_mount_stat
#   failed_when: False
#   changed_when: False
#   tags:
#     - ramdisks
# - name: "check mount point /var/lib/rook "
#   command: mountpoint /var/lib/rook
#   register: rook_mount_stat
#   failed_when: False
#   changed_when: False
#   tags:
#     - ramdisks
# - name: "check mount point /var/lib/kubelet "
#   command: mountpoint /var/lib/kubelet
#   register: kubelet_mount_stat
#   failed_when: False
#   changed_when: False
#   tags:
#     - ramdisks    
# - name: Unmount up k3s ramdisk
#   ansible.posix.mount:
#     path: /var/lib/rancher
#     state: unmounted
#   when:
#     - ramdisk is not defined or ( (ramdisk == 'no') or (ramdisk == false) )
#     - k3s_mount_stat.stdout == "/var/lib/rancher is a mountpoint"
#   tags:
#     - ramdisks
# - name: Unmount up rook ramdisk
#   ansible.posix.mount:
#     path: /var/lib/rook
#     state: unmounted
#   when:
#     - ramdisk is not defined or ( (ramdisk == 'no') or (ramdisk == false) )
#     - rook_mount_stat.stdout == "/var/lib/rook is a mountpoint"
#   tags:
#     - ramdisks
# - name: Unmount up kubelet ramdisk
#   ansible.posix.mount:
#     path: /var/lib/kubelet
#     state: unmounted
#   when:
#     - ramdisk is not defined or ( (ramdisk == 'no') or (ramdisk == false) )
#     - kubelet_mount_stat.stdout == "/var/lib/kubelet is a mountpoint"
#   tags:
#     - ramdisks

# # Ensure the below is done only for nodes with ramdisk enabled
# - name: Delete rancher ramdisk mount directory
#   ansible.builtin.file:
#     state: absent
#     path: "/var/lib/rancher"
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Delete kubelet ramdisk mount directory
#   ansible.builtin.file:
#     state: absent
#     path: "/var/lib/kubelet"
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Delete rook ramdisk mount directory
#   ansible.builtin.file:
#     state: absent
#     path: "/var/lib/rook"
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Create ramdisk backup directory
#   ansible.builtin.file:
#     state: directory
#     path: "/var/ramdisk-backup"
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Create rancher ramdisk mount directory
#   ansible.builtin.file:
#     state: directory
#     path: "/var/lib/rancher"
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Create kubelet ramdisk mount directory
#   ansible.builtin.file:
#     state: directory
#     path: "/var/lib/kubelet"
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Create rook ramdisk mount directory
#   ansible.builtin.file:
#     state: directory
#     path: "/var/lib/rook"
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Mount up k3s ramdisk
#   ansible.posix.mount:
#     path: /var/lib/rancher
#     src: tmpfs
#     fstype: tmpfs
#     opts: rw,nodev,nosuid,size=16G
#     state: mounted
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Mount up rook ramdisk
#   ansible.posix.mount:
#     path: /var/lib/rook
#     src: tmpfs
#     fstype: tmpfs
#     opts: rw,nodev,nosuid,size=512M
#     state: mounted
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Mount up kubelet ramdisk
#   ansible.posix.mount:
#     path: /var/lib/kubelet
#     src: tmpfs
#     fstype: tmpfs
#     opts: rw,nodev,nosuid,size=200M
#     state: mounted
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

  
# # No ramdisks
# - name: Remove up k3s ramdisk
#   ansible.posix.mount:
#     path: /var/lib/rancher
#     src: tmpfs
#     fstype: tmpfs
#     opts: rw,nodev,nosuid,size=16G
#     state: absent
#   when:
#     - ramdisk is defined and ( (ramdisk == 'no') or (ramdisk == false) )
#   tags:
#     - ramdisks

# - name: Remove up rook ramdisk
#   ansible.posix.mount:
#     path: /var/lib/rook
#     src: tmpfs
#     fstype: tmpfs
#     opts: rw,nodev,nosuid,size=512M
#     state: absent
#   when:
#     - ramdisk is defined and ( (ramdisk == 'no') or (ramdisk == false) )
#   tags:
#     - ramdisks

# - name: Remove up kubelet ramdisk
#   ansible.posix.mount:
#     path: /var/lib/kubelet
#     src: tmpfs
#     fstype: tmpfs
#     opts: rw,nodev,nosuid,size=200M
#     state: absent
#   when:
#     - ramdisk is defined and ( (ramdisk == 'no') or (ramdisk == false) )
#   tags:
#     - ramdisks

# - name: Put an empty file in each ramdisk for tests
#   ansible.builtin.shell: >
#     touch /var/lib/rancher/test
#     touch /var/lib/kubelet/test
#     touch /var/lib/rook/test
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks


# - name: Update /etc/init.d/ramdisk 
#   ansible.builtin.blockinfile:
#     path: /etc/init.d/ramdisk
#     create: true
#     mode: ug+rwx
#     block: |
#       #! /bin/sh
#       # /etc/init.d/ramdisk
#       #
#       case "$1" in
#       start)
#           echo "Copying rancher files to ramdisk"
#           # cd /var/lib/rancher
#           # tar --lzop -xvf /var/ramdisk-backup/ramdisk-rancher-backup.tar.lzop
#           # echo [`date +"%Y-%m-%d %H:%M"`] Rancher Ramdisk Synched from HD >> /var/log/ramdisk_sync.log
#           # echo "Copying kubelet files to ramdisk"
#           # cd /var/lib/kubelet
#           # tar --lzop -xvf /var/ramdisk-backup/ramdisk-kubelet-backup.tar.lzop
#           # echo [`date +"%Y-%m-%d %H:%M"`] kubelet Ramdisk Synched from HD >> /var/log/ramdisk_sync.log
#           # echo "Copying rancher files to ramdisk"
#           # cd /var/lib/rook
#           # tar --lzop -xvf /var/ramdisk-backup/ramdisk-rook-backup.tar.lzop
#           echo [`date +"%Y-%m-%d %H:%M"`] rook Ramdisk Synched from HD >> /var/log/ramdisk_sync.log
#           ;;
#       sync)
#           echo "Synching rancher files from ramdisk to Harddisk"
#           echo [`date +"%Y-%m-%d %H:%M"`] Rancher Ramdisk Synched to HD >> /var/log/ramdisk_sync.log
#           # cd /var/ramdisk-backup/
#           # mv -f ramdisk-rancher-backup.tar.lzop ramdisk-rancher-backup-old.tar.lzop
#           # tar --lzop -cvf ramdisk-rancher-backup.tar.lzop /var/lib/rancher  --transform 's,^var/lib/rancher,.,g'
#           # echo "Synching kubelet files from ramdisk to Harddisk"
#           # echo [`date +"%Y-%m-%d %H:%M"`] kubelet Ramdisk Synched to HD >> /var/log/ramdisk_sync.log
#           # mv -f ramdisk-kubelet-backup.tar.lzop ramdisk-kubelet-backup-old.tar.lzop
#           # tar --lzop -cvf ramdisk-kubelet-backup.tar.lzop /var/lib/kubelet --transform 's,^var/lib/kubelet,.,g'
#           # echo "Synching rook files from ramdisk to Harddisk"
#           # echo [`date +"%Y-%m-%d %H:%M"`] rook Ramdisk Synched to HD >> /var/log/ramdisk_sync.log
#           # mv -f ramdisk-rook-backup.tar.lzop ramdisk-rook-backup-old.tar.lzop
#           # tar --lzop -cvf ramdisk-rook-backup.tar.lzop /var/lib/rook  --transform 's,^var/lib/rook,.,g'
#           ;;
#       stop)
#           echo "Synching logfiles from ramdisk to Harddisk"
#           echo [`date +"%Y-%m-%d %H:%M"`] STOP: Ramdisk Synched to HD START >> /var/log/ramdisk_sync.log
#           # cd /var/ramdisk-backup/
#           # tar --lzop -cvf ramdisk-rancher-backup.tar.lzop /var/lib/rancher  --transform 's,^var/lib/rancher,.,g'
#           # tar --lzop -cvf ramdisk-kubelet-backup.tar.lzop /var/lib/kubelet  --transform 's,^var/lib/kubelet,.,g'
#           # tar --lzop -cvf ramdisk-rook-backup.tar.lzop /var/lib/rook  --transform 's,^var/lib/rook,.,g'
#           # echo [`date +"%Y-%m-%d %H:%M"`] STOP Ramdisk Synched to HD DONE >> /var/log/ramdisk_sync.log
#           ;;
#       *)
#           echo "Usage: /etc/init.d/ramdisk {start|stop|sync}"
#           exit 1
#           ;;
#       esac
#       exit 0
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: "Ensure RAM Disk cron is Removed"
#   ansible.builtin.cron:
#     name: "Sync RAM Disk"
#     state: absent
#     user: root
#     cron_file: ansible_ramdisk_sync
#   when:
#     - ramdisk is defined and ( (ramdisk == 'no') or (ramdisk == false) )
#   tags:
#     - ramdisks

# - name: "Ensure RAM Disk is synced every two minutes"
#   ansible.builtin.cron:
#     name: "Sync RAM Disk"
#     minute: "2"
#     user: root
#     job: "/etc/init.d/ramdisk sync >> /dev/null 2>&1"
#     cron_file: ansible_ramdisk_sync
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Make ramdisk script run on 00 99
#   ansible.builtin.shell: update-rc.d ramdisk defaults 00 99
#   when:
#     - ramdisk is defined and ( (ramdisk == 'yes') or (ramdisk == true) )
#   tags:
#     - ramdisks

# - name: Ensure ramdisk service is disabled
#   ansible.builtin.shell: update-rc.d ramdisk disable 00 99
#   failed_when: False
#   changed_when: False
#   when:
#     - ramdisk is defined and ( (ramdisk == 'no') or (ramdisk == false) )
#   tags:
#     - ramdisks
