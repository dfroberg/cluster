---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sabnzbd
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: sabnzbd
      version: 9.3.1
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  install:
    timeout: 10m
    remediation:
      retries: 3
  upgrade:
    timeout: 10m
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true
  values:
    image:
      repository: ghcr.io/k8s-at-home/sabnzbd
      tag: v3.5.3
    updateStrategy: Recreate
    env:
      TZ: "${CLUSTER_TZ}"
      HOST_WHITELIST_ENTRIES: >-
        sabnzbd,
        sabnzbd.media,
        sabnzbd.media.svc,
        sabnzbd.media.svc.cluster,
        sabnzbd.media.svc.cluster.local,
        sabnzbd.${SECRET_DOMAIN}
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "false"
          hajimari.io/enable: "true"
          hajimari.io/icon: "download-box"
          #traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          #traefik.ingress.kubernetes.io/router.middlewares: "networking-basic-auth@kubernetescrd"
        hosts:
          - host: "sabnzbd.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: "${SECRET_DOMAIN//./-}-tls"
            hosts:
              - "sabnzbd.${SECRET_DOMAIN}"
      api:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          #traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://theme-park.dev/css/base/sabnzbd/nord.css"></head>';
            sub_filter_once on;
          nginx.ingress.kubernetes.io/auth-url: "http://authelia.security.svc.cluster.local/api/verify"
          nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
        hosts:
          - host: "sabnzbd.${SECRET_DOMAIN}"
            paths:
              - path: /api
                pathType: Prefix
        tls:
          - secretName: "${SECRET_DOMAIN//./-}-tls"
            hosts:
              - "sabnzbd.${SECRET_DOMAIN}"
    podSecurityContext:
      supplementalGroups:
        - 100
    persistence:
      config:
        enabled: true
        existingClaim: sabnzbd-config-v1
      media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${NAS_ADDR}"
            path: ${NAS_BASE_PATH}/
        mountPath: /media
    podAnnotations:
      backup.velero.io/backup-volumes: config
      pre.hook.backup.velero.io/container: fsfreeze
      pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/config"]'
      post.hook.backup.velero.io/container: fsfreeze
      post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/config"]'
    nodeSelector: 
      worker: yes
    resources:
      requests:
        memory: 250Mi
        cpu: 2500m
      limits:
        memory: 8500Mi
    additionalContainers:
      fsfreeze:
        name: fsfreeze
        image: ubuntu:focal-20210827
        imagePullPolicy: IfNotPresent
        command:
          - "/bin/bash"
          - "-c"
          - "sleep infinity"
        volumeMounts:
          - name: config
            mountPath: /config
        securityContext:
          privileged: true
